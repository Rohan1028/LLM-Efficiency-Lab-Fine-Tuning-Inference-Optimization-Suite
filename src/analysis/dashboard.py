from __future__ import annotations

import json
from pathlib import Path

import pandas as pd
import plotly.express as px
import streamlit as st


st.set_page_config(page_title="LLM Efficiency Lab Dashboard", layout="wide")
st.title("LLM Efficiency Lab Dashboard")
st.markdown(
    """
    Explore trade-offs between accuracy, latency, and GPU memory footprint
    for different fine-tuning and inference strategies. Load experiment
    artifacts generated by the training and inference scripts.
    """
)


def load_json(path: str) -> dict:
    file_path = Path(path)
    if not file_path.exists():
        st.warning(f"File {path} not found.")
        return {}
    return json.loads(file_path.read_text(encoding="utf-8"))


quant_path = st.text_input(
    "Quantization metrics file",
    value="results/inference/quantization_metrics.json",
    help="Path to the JSON output from quantization_benchmark.py",
)
batch_path = st.text_input(
    "Batching metrics file",
    value="results/inference/batching_metrics.json",
    help="Path to the JSON output from batching_optimizer.py",
)
training_path = st.text_input(
    "Training metrics file",
    value="outputs/mistral_lora/metrics.json",
    help="Path to the Trainer metrics file for a fine-tuning run.",
)


quant_data = load_json(quant_path)
batch_data = load_json(batch_path)
train_data = load_json(training_path)

with st.expander("Training Metrics", expanded=True):
    if train_data:
        st.json(train_data)
    else:
        st.write("No training metrics loaded.")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Quantization Trade-offs")
    if quant_data:
        df = pd.DataFrame(quant_data["results"])
        fig = px.scatter(
            df,
            x="avg_latency_s",
            y="throughput_tokens_per_s",
            size="gpu_memory_gb",
            color="bits",
            hover_data=["output_sample"],
            title="Latency vs Throughput by Quantization Level",
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.write("No quantization data available.")

with col2:
    st.subheader("Batch Size Sensitivity")
    if batch_data:
        df = pd.DataFrame(batch_data["results"])
        fig = px.line(
            df,
            x="batch_size",
            y="throughput_tokens_per_s",
            markers=True,
            title="Throughput vs Batch Size",
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.write("No batching data available.")
